{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/solomonsunday/Code/Haggerston_Navigation_Project/haggerston_pack_navigator/app/components/Welcome.tsx"],"sourcesContent":["import React from \"react\";\n\nconst Welcome = () => {\n  return (\n    <div className=\" font-bold text-2xl text-center\">\n      Welcome To Haggerston Holiday Park\n    </div>\n  );\n};\n\nexport default Welcome;\n"],"names":[],"mappings":";;;;;AAEA,MAAM,UAAU;IACd,qBACE,8OAAC;QAAI,WAAU;kBAAkC;;;;;;AAIrD;uCAEe","debugId":null}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/solomonsunday/Code/Haggerston_Navigation_Project/haggerston_pack_navigator/app/Hooks/useCurrentLocation.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst UseGetCurrentLocation = () => {\n  const [currentLocation, setCurrentLocation] = useState<{\n    lat: number;\n    lng: number;\n  } | null>(null);\n\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setCurrentLocation({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          });\n        },\n        (err) => {\n          setError(\"Permission denied or unavailable\");\n        }\n      );\n    } else {\n      setError(\"Geolocation not supported\");\n    }\n  }, []);\n  return {\n    currentLocation,\n    setCurrentLocation,\n    error,\n  };\n};\nexport default UseGetCurrentLocation;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC5B,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAG3C;IAEV,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAElD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,iBAAiB,WAAW;YAC9B,UAAU,WAAW,CAAC,kBAAkB,CACtC,CAAC;gBACC,mBAAmB;oBACjB,KAAK,SAAS,MAAM,CAAC,QAAQ;oBAC7B,KAAK,SAAS,MAAM,CAAC,SAAS;gBAChC;YACF,GACA,CAAC;gBACC,SAAS;YACX;QAEJ,OAAO;YACL,SAAS;QACX;IACF,GAAG,EAAE;IACL,OAAO;QACL;QACA;QACA;IACF;AACF;uCACe","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///Users/solomonsunday/Code/Haggerston_Navigation_Project/haggerston_pack_navigator/app/Hooks/useNameOfPlace.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport getCurrentLocation from \"./useCurrentLocation\";\n\nconst getNameOfPlace = () => {\n  // This function is intended to retrieve the name of a place based on coordinates or other criteria.\n  const [address, setAddress] = useState<string | null>(null);\n  const { currentLocation } = getCurrentLocation();\n\n  useEffect(() => {\n    fetchAddress();\n  }, [currentLocation]);\n\n  const fetchAddress = async () => {\n    try {\n      if (currentLocation?.lat && currentLocation?.lng) {\n        const response = await fetch(\n          `https://maps.googleapis.com/maps/api/geocode/json?latlng=${currentLocation?.lat},${currentLocation?.lng}&key=${process.env.NEXT_PUBLIC_GOOGLE_API_KEY}`\n        );\n        const data = await response.json();\n        setAddress(\n          data.results[0]?.formatted_address.split(\",\")[0] ||\n            \"Address not found\"\n        );\n      }\n    } catch (error) {\n      console.error(\"Error fetching address:\", error);\n    }\n  };\n\n  return {\n    address,\n  };\n};\n\nexport default getNameOfPlace;\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,iBAAiB;IACrB,oGAAoG;IACpG,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACtD,MAAM,EAAE,eAAe,EAAE,GAAG,CAAA,GAAA,mIAAA,CAAA,UAAkB,AAAD;IAE7C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG;QAAC;KAAgB;IAEpB,MAAM,eAAe;QACnB,IAAI;YACF,IAAI,iBAAiB,OAAO,iBAAiB,KAAK;gBAChD,MAAM,WAAW,MAAM,MACrB,CAAC,yDAAyD,EAAE,iBAAiB,IAAI,CAAC,EAAE,iBAAiB,IAAI,KAAK,+EAA0C;gBAE1J,MAAM,OAAO,MAAM,SAAS,IAAI;gBAChC,WACE,KAAK,OAAO,CAAC,EAAE,EAAE,kBAAkB,MAAM,IAAI,CAAC,EAAE,IAC9C;YAEN;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2BAA2B;QAC3C;IACF;IAEA,OAAO;QACL;IACF;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///Users/solomonsunday/Code/Haggerston_Navigation_Project/haggerston_pack_navigator/app/data.ts"],"sourcesContent":["import { ILocationData } from \"./interfaces/interface\";\n\nexport const locations: ILocationData[] = [\n  {\n    name: \"The Coppers\",\n    coord: { lat: 54.9779, lng: -1.6142 },\n  },\n  {\n    name: \"Lindisfarne Meadows\",\n    coord: { lat: 55.6935895, lng: -1.9298718 },\n  },\n  {\n    name: \"Well Close\",\n    coord: { lat: 55.6952244, lng: -1.9306923 },\n  },\n  {\n    name: \"Cheviot View\",\n    coord: { lat: 55.6935111, lng: -1.9303067 },\n  },\n  {\n    name: \"Badger Lakes \",\n    coord: { lat: 55.6927302, lng: -1.9290705 },\n  },\n\n  {\n    name: \"Cooks \",\n    coord: { lat: 55.6869257, lng: -1.9359749 },\n  },\n];\n"],"names":[],"mappings":";;;AAEO,MAAM,YAA6B;IACxC;QACE,MAAM;QACN,OAAO;YAAE,KAAK;YAAS,KAAK,CAAC;QAAO;IACtC;IACA;QACE,MAAM;QACN,OAAO;YAAE,KAAK;YAAY,KAAK,CAAC;QAAU;IAC5C;IACA;QACE,MAAM;QACN,OAAO;YAAE,KAAK;YAAY,KAAK,CAAC;QAAU;IAC5C;IACA;QACE,MAAM;QACN,OAAO;YAAE,KAAK;YAAY,KAAK,CAAC;QAAU;IAC5C;IACA;QACE,MAAM;QACN,OAAO;YAAE,KAAK;YAAY,KAAK,CAAC;QAAU;IAC5C;IAEA;QACE,MAAM;QACN,OAAO;YAAE,KAAK;YAAY,KAAK,CAAC;QAAU;IAC5C;CACD","debugId":null}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["file:///Users/solomonsunday/Code/Haggerston_Navigation_Project/haggerston_pack_navigator/app/components/SearchForm.tsx"],"sourcesContent":["import React from \"react\";\nimport Welcome from \"./Welcome\";\nimport getNameOfPlace from \"../Hooks/useNameOfPlace\";\nimport { MapFormProps } from \"../interfaces/interface\";\nimport { useDestination } from \"../context/selectedDestinationContext\";\nimport { locations } from \"../data\";\n\nconst MapForm: React.FC<MapFormProps> = ({ setFindLocation }) => {\n  const { address } = getNameOfPlace();\n\n  const { setSelectedDestination } = useDestination();\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setFindLocation(true);\n  };\n\n  return (\n    <div className=\" mt-10 flex flex-col justify-center items-center min-h-screen\">\n      <Welcome />\n      <form action=\"onSubmit\" className=\"space-y-4\">\n        <input\n          defaultValue={`You are here,  ${\n            address ? address : \"Getting your current location...\"\n          }`}\n          type=\"text\"\n          placeholder=\"Enter your location\"\n          className=\"border border-gray-300 rounded p-2 w-full mb-4\"\n        />\n\n        <select\n          className=\"border border-gray-300 rounded p-2 w-full mt-2\"\n          onChange={(e) => {\n            const selectedValue = e.target.value;\n            if (selectedValue) {\n              const [lat, lng] = selectedValue.split(\",\");\n              setSelectedDestination({\n                coord: { lat: parseFloat(lat), lng: parseFloat(lng) },\n                name: e.target.options[e.target.selectedIndex].text,\n              });\n            }\n          }}\n        >\n          <option value=\"\">Select Destination</option>\n          {locations.map((item, idx) => (\n            <option key={idx} value={`${item.coord.lat}, ${item.coord.lng}`}>\n              {item.name}\n            </option>\n          ))}\n        </select>\n\n        <div className=\"w-full max-w-md\">\n          <button\n            className=\"bg-slate-900 text-white px-4 py-2 rounded w-full\"\n            onClick={onSubmit}\n            type=\"submit\"\n          >\n            Find Location\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default MapForm;\n"],"names":[],"mappings":";;;;AACA;AACA;AAEA;AACA;;;;;;AAEA,MAAM,UAAkC,CAAC,EAAE,eAAe,EAAE;IAC1D,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,UAAc,AAAD;IAEjC,MAAM,EAAE,sBAAsB,EAAE,GAAG,CAAA,GAAA,6IAAA,CAAA,iBAAc,AAAD;IAEhD,MAAM,WAAW,CAAC;QAChB,EAAE,cAAc;QAChB,gBAAgB;IAClB;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,6HAAA,CAAA,UAAO;;;;;0BACR,8OAAC;gBAAK,QAAO;gBAAW,WAAU;;kCAChC,8OAAC;wBACC,cAAc,CAAC,eAAe,EAC5B,UAAU,UAAU,oCACpB;wBACF,MAAK;wBACL,aAAY;wBACZ,WAAU;;;;;;kCAGZ,8OAAC;wBACC,WAAU;wBACV,UAAU,CAAC;4BACT,MAAM,gBAAgB,EAAE,MAAM,CAAC,KAAK;4BACpC,IAAI,eAAe;gCACjB,MAAM,CAAC,KAAK,IAAI,GAAG,cAAc,KAAK,CAAC;gCACvC,uBAAuB;oCACrB,OAAO;wCAAE,KAAK,WAAW;wCAAM,KAAK,WAAW;oCAAK;oCACpD,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI;gCACrD;4BACF;wBACF;;0CAEA,8OAAC;gCAAO,OAAM;0CAAG;;;;;;4BAChB,2GAAA,CAAA,YAAS,CAAC,GAAG,CAAC,CAAC,MAAM,oBACpB,8OAAC;oCAAiB,OAAO,GAAG,KAAK,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE;8CAC5D,KAAK,IAAI;mCADC;;;;;;;;;;;kCAMjB,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BACC,WAAU;4BACV,SAAS;4BACT,MAAK;sCACN;;;;;;;;;;;;;;;;;;;;;;;AAOX;uCAEe","debugId":null}},
    {"offset": {"line": 280, "column": 0}, "map": {"version":3,"sources":["file:///Users/solomonsunday/Code/Haggerston_Navigation_Project/haggerston_pack_navigator/app/components/MapWrapper.tsx"],"sourcesContent":["import { LoadScript, Libraries } from \"@react-google-maps/api\";\n\nconst libraries: Libraries = [\"places\"];\n\nexport const MapWrapper = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <LoadScript\n      googleMapsApiKey={process.env.NEXT_PUBLIC_GOOGLE_API_KEY!}\n      libraries={libraries}\n    >\n      {children}\n    </LoadScript>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,MAAM,YAAuB;IAAC;CAAS;AAEhC,MAAM,aAAa,CAAC,EAAE,QAAQ,EAAiC;IACpE,qBACE,8OAAC,+JAAA,CAAA,aAAU;QACT,gBAAgB;QAChB,WAAW;kBAEV;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":["file:///Users/solomonsunday/Code/Haggerston_Navigation_Project/haggerston_pack_navigator/app/page.tsx"],"sourcesContent":["\"use client\";\nimport dynamic from \"next/dynamic\";\nimport MapForm from \"./components/SearchForm\";\nimport { useState } from \"react\";\nimport { MapWrapper } from \"./components/MapWrapper\";\n\nconst DirectionMap = dynamic(() => import(\"./components/DirectionMap\"), {\n  ssr: false,\n});\n\nexport default function Home() {\n  const [findLocation, setFindLocation] = useState<boolean>(false);\n\n  return (\n    <div className=\"\">\n      {!findLocation ? (\n        <MapForm setFindLocation={setFindLocation} />\n      ) : (\n        <MapWrapper>\n          <DirectionMap />\n        </MapWrapper>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;;AAJA;;;;;;AAMA,MAAM,eAAe,CAAA,GAAA,+JAAA,CAAA,UAAO,AAAD;;;;;;IACzB,KAAK;;AAGQ,SAAS;IACtB,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAE1D,qBACE,8OAAC;QAAI,WAAU;kBACZ,CAAC,6BACA,8OAAC,gIAAA,CAAA,UAAO;YAAC,iBAAiB;;;;;iCAE1B,8OAAC,gIAAA,CAAA,aAAU;sBACT,cAAA,8OAAC;;;;;;;;;;;;;;;AAKX","debugId":null}}]
}